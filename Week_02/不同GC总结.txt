不同GC的总结：
串行GC Serial
	特点：单线程垃圾回收器，每次回收只有一个工作线程。对于并发能力较弱的计算机来说，串行回收期的独占性表现更好。串行回收器可以在新生代和老年代使用，根据作用的堆空间不同，分为新生代串行回收器和老年代回收器。
	缺点：Serial收集器回收垃时，必须暂停用户的所有线程，即STW.
	参数控制：-XX:+UseSerialGC 

并行GC
	并行回收器在串行回收器的基础上做了改进，可以使用多个线程同时进行垃圾回收。
	ParNew
		工作在新生代，简单的将串行收集器多线程化，回收策略，新生代并行，老年代串行；新生代复制，老年代标记压缩
		参数控制：-XX:+UseParNewGC 使用ParNew收集器     -XX:ParallelGCThreads 限制线程数量
	Parallel
		采用复制算法的多线程新生代垃圾回收器，Parallel收集器更关注系统的吞吐量。
		参数控制：-XX:MaxGCPauseMillis 设置最大垃圾收集停顿时间
				  -XX:+UseParallelGC
	Parallel Old
		Parallel Scavenge收集器的老年代版本，采用多线程和”标记－整理”算法，比较关注吞吐量
		参数控制：-XX:+UseParallelOldGC 使用ParallelOld收集器    -XX:ParallelGCThreads 限制线程数量
CMS垃圾回收器
	并发标记请除，使用的是标记请除法，工作在老年代，主要关注系统的停顿时间。
	相比于上面的垃圾回收器，CMS并不是独占的回收器，CMS回收的过程中应用程序仍然在不停的工作.
	缺点：内存碎片问题
	XX:+UserConcMarkSweepGC 使用cms垃圾清理器     -XX:ConcGCThreads 限制线程数量  
G1
	关注最小时延的垃圾回收器，G1从整体看来是基于“标记-整理”算法实现的收集器，从局部（两个Region之间）上看是基于“复制”算法实现，G1不会产生空间碎片。
	引入分区的概念，合理利用垃圾收集各个周期的资源，比较适合大尺寸堆内存的垃圾收集
	参数控制：-XX:+UseG1GC 使用G1垃圾收集器    -XX:ParallelGCThreads 限制线程数量    -XX:MaxGCPauseMillis 指定最大停顿时间